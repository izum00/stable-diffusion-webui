function gradioApp(){const elems=document.getElementsByTagName('gradio-app');const elem=elems.length==0?document:elems[0];if(elem!==document){elem.getElementById=function(id){return document.getElementById(id)}} return elem.shadowRoot?elem.shadowRoot:elem} function get_uiCurrentTab(){return gradioApp().querySelector('#tabs > .tab-nav > button.selected')} function get_uiCurrentTabContent(){return gradioApp().querySelector('#tabs > .tabitem[id^=tab_]:not([style*="display: none"])')} var uiUpdateCallbacks=[];var uiAfterUpdateCallbacks=[];var uiLoadedCallbacks=[];var uiTabChangeCallbacks=[];var optionsChangedCallbacks=[];var optionsAvailableCallbacks=[];var uiAfterUpdateTimeout=null;var uiCurrentTab=null;function onUiUpdate(callback){uiUpdateCallbacks.push(callback)} function onAfterUiUpdate(callback){uiAfterUpdateCallbacks.push(callback)} function onUiLoaded(callback){uiLoadedCallbacks.push(callback)} function onUiTabChange(callback){uiTabChangeCallbacks.push(callback)} function onOptionsChanged(callback){optionsChangedCallbacks.push(callback)} function onOptionsAvailable(callback){if(Object.keys(opts).length!=0){callback();return} optionsAvailableCallbacks.push(callback)} function executeCallbacks(queue,arg){for(const callback of queue){try{callback(arg)}catch(e){console.error("error running callback",callback,":",e)}}} function scheduleAfterUiUpdateCallbacks(){clearTimeout(uiAfterUpdateTimeout);uiAfterUpdateTimeout=setTimeout(function(){executeCallbacks(uiAfterUpdateCallbacks)},200)} var executedOnLoaded=!1;document.addEventListener("DOMContentLoaded",function(){var mutationObserver=new MutationObserver(function(m){if(!executedOnLoaded&&gradioApp().querySelector('#txt2img_prompt')){executedOnLoaded=!0;executeCallbacks(uiLoadedCallbacks)} executeCallbacks(uiUpdateCallbacks,m);scheduleAfterUiUpdateCallbacks();const newTab=get_uiCurrentTab();if(newTab&&(newTab!==uiCurrentTab)){uiCurrentTab=newTab;executeCallbacks(uiTabChangeCallbacks)}});mutationObserver.observe(gradioApp(),{childList:!0,subtree:!0})});document.addEventListener('keydown',function(e){const isEnter=e.key==='Enter'||e.keyCode===13;const isCtrlKey=e.metaKey||e.ctrlKey;const isAltKey=e.altKey;const isEsc=e.key==='Escape';const generateButton=get_uiCurrentTabContent().querySelector('button[id$=_generate]');const interruptButton=get_uiCurrentTabContent().querySelector('button[id$=_interrupt]');const skipButton=get_uiCurrentTabContent().querySelector('button[id$=_skip]');if(isCtrlKey&&isEnter){if(interruptButton.style.display==='block'){interruptButton.click();const callback=(mutationList)=>{for(const mutation of mutationList){if(mutation.type==='attributes'&&mutation.attributeName==='style'){if(interruptButton.style.display==='none'){generateButton.click();observer.disconnect()}}}};const observer=new MutationObserver(callback);observer.observe(interruptButton,{attributes:!0})}else{generateButton.click()} e.preventDefault()} if(isAltKey&&isEnter){skipButton.click();e.preventDefault()} if(isEsc){const globalPopup=document.querySelector('.global-popup');const lightboxModal=document.querySelector('#lightboxModal');if(!globalPopup||globalPopup.style.display==='none'){if(document.activeElement===lightboxModal)return;if(interruptButton.style.display==='block'){interruptButton.click();e.preventDefault()}}}});function uiElementIsVisible(el){if(el===document){return!0} const computedStyle=getComputedStyle(el);const isVisible=computedStyle.display!=='none';if(!isVisible)return!1;return uiElementIsVisible(el.parentNode)} function uiElementInSight(el){const clRect=el.getBoundingClientRect();const windowHeight=window.innerHeight;const isOnScreen=clRect.bottom>0&&clRect.top<windowHeight;return isOnScreen}
